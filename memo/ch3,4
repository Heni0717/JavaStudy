ch3 # 계산(연산자)
    - 피연산자 : 계산의 대상이 되는 것(연산자로 인해 계산되는 숫자)
    - 연산자 : 계산의 목적이 되는 것(계산할 기호)
    - 산술연산자 : +, -, *, /, %, <<, >>
    - 비교연산자 : >, <, >=, <=, ==, !=
    - 논리연산자 : &&, ||, !
    - 대입연산자 : =, ++, --
    - 기타연산자 : (type), ? :(삼항연산자), instance of

# 연산자 우선순위 : 산술 > 비교 > 논리 > 대입
    - 단 괄호로 감싸면 괄호안의 연산이 최우선순위로 계산

# 피연산자의 타입이 다른 경우 > 둘중 저장공간의 크기가 더 큰 타입으로 일치
    - int(4byte) > short(2byte)
    - 뭐 대충 이런식으로....
    - double > float > long > int > short ?? 이게 맞나

# 비트 연산
    - bit는 가장 작은 단위이므로 연산이 가장 빠름
    - 비트의 자리수를 옮기는 것을 bit 연산이라고 함 : >>(오른쪽으로 자리수 옮기기) <<(왼쪽으로 자리수 옮기기)


-----------------
ch4
[문맥 만들기 (조건문, 반복문)]
# 조건문 : if, switch
    - 프로그래밍에서 특정 조건에 따라 다른 연산을 수행하고 싶을 때 사용하는 문맥
    - if(조건){연산} : 소괄호의 조건이 참이면(boolean 값 true를 만족하면) 중괄호 안의 연산 수행
    - if(조건){연산}else{연산} : 소괄호의 조건이 거짓일때 else{}연산 수행
    - switch : if문보다 좀더 가독성이 좋은 조건문 표현식
    - switch(피연산자){case(조건):(연산)} : 피연산자가 case조건을 만족하면 case:뒤의 연산 수행
            - 여러개의 조건:연산 설정 가능, 각 case문 마지막엔 break; 기입
            - case문을 끝낸 후 switch문 마지막엔 default:(연산) 으로 조건을 모두 만족하지 않을 때의 연산 수행
    - if, switch 차이
        if : 복합조건을 지원, ()안에 여러 조건을 지정해 조건문 수행 가능, 코드 중복이 많음
        switch : 피연산자 한개에 대한 조건만 지원, 코드중복이 적음

# 반복문 : for, while, do-while
    -  특정 조건에 따라 동일한 연산을 반복 수행하고 싶을 때 사용하는 문맥
    - for(초기값;조건문;증감연산){(연산)} : 초기값이 조건문을 만족할때까지 회차마다 증감연산을 수행하며 연산을 수행
    - while(조건문){(연산)} : 초기값 없이 조건문만 명시해 조건이 불만족할때까지 반복 수행
    - do{(연산)}while(조건문) : 최초 1회 연산 수행 후 조건문을 체크해 더 반복할지 결정
    - break : 가장 가까운 블록의 반복을 중단
    - continue : 하위로직을 무시하고 다음 반복문으로 넘어감























